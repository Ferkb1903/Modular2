#!/usr/bin/env python3
"""
üîç AN√ÅLISIS DE PROPORCI√ìN PHANTOM/HETEROGENEIDAD
===============================================

Analiza la relaci√≥n entre el tama√±o del phantom de agua y la heterogeneidad
para optimizar el dise√±o experimental y maximizar el contraste en la comparaci√≥n.

Autor: Equipo de F√≠sica M√©dica
Fecha: Septiembre 2024
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import warnings
warnings.filterwarnings('ignore')

def analyze_current_geometry():
    """Analizar la geometr√≠a actual"""
    print("üîç AN√ÅLISIS DE LA GEOMETR√çA ACTUAL")
    print("=" * 50)
    
    # Configuraci√≥n actual
    phantom_size = 30.0  # cm (30√ó30√ó30 cm)
    hetero_size = 6.0    # cm (6√ó6√ó6 cm)
    hetero_position = [0, 6, 0]  # cm
    
    # C√°lculos de volumen
    phantom_volume = phantom_size**3
    hetero_volume = hetero_size**3
    water_volume = phantom_volume - hetero_volume
    
    # Porcentajes
    hetero_percentage = (hetero_volume / phantom_volume) * 100
    water_percentage = (water_volume / phantom_volume) * 100
    
    print(f"\nüìè DIMENSIONES ACTUALES:")
    print(f"   ‚Ä¢ Phantom total: {phantom_size}√ó{phantom_size}√ó{phantom_size} cm")
    print(f"   ‚Ä¢ Heterogeneidad: {hetero_size}√ó{hetero_size}√ó{hetero_size} cm")
    print(f"   ‚Ä¢ Posici√≥n heterogeneidad: {hetero_position} cm")
    
    print(f"\nüìä VOL√öMENES:")
    print(f"   ‚Ä¢ Phantom total: {phantom_volume:,.0f} cm¬≥")
    print(f"   ‚Ä¢ Heterogeneidad: {hetero_volume:,.0f} cm¬≥ ({hetero_percentage:.1f}%)")
    print(f"   ‚Ä¢ Agua: {water_volume:,.0f} cm¬≥ ({water_percentage:.1f}%)")
    
    print(f"\nüéØ PROBLEMA IDENTIFICADO:")
    print(f"   ‚Ä¢ La heterogeneidad representa solo {hetero_percentage:.1f}% del volumen total")
    print(f"   ‚Ä¢ El {water_percentage:.1f}% restante es agua homog√©nea")
    print(f"   ‚Ä¢ Esto diluye el contraste en el an√°lisis comparativo")
    
    return {
        'phantom_size': phantom_size,
        'hetero_size': hetero_size,
        'hetero_position': hetero_position,
        'hetero_percentage': hetero_percentage
    }

def propose_optimized_geometries():
    """Proponer geometr√≠as optimizadas"""
    print("\n" + "="*70)
    print("üí° PROPUESTAS DE OPTIMIZACI√ìN GEOM√âTRICA")
    print("="*70)
    
    scenarios = [
        {
            'name': 'Conservador',
            'phantom_size': 20.0,
            'hetero_size': 8.0,
            'description': 'Reducir phantom, aumentar heterogeneidad moderadamente'
        },
        {
            'name': 'Equilibrado', 
            'phantom_size': 16.0,
            'hetero_size': 10.0,
            'description': 'Phantom compacto con heterogeneidad prominente'
        },
        {
            'name': 'Agresivo',
            'phantom_size': 14.0,
            'hetero_size': 12.0,
            'description': 'Maximizar proporci√≥n de heterogeneidad'
        },
        {
            'name': 'M√°ximo contraste',
            'phantom_size': 12.0,
            'hetero_size': 10.0,
            'description': 'Phantom m√≠nimo viable con heterogeneidad dominante'
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        phantom_vol = scenario['phantom_size']**3
        hetero_vol = scenario['hetero_size']**3
        hetero_percent = (hetero_vol / phantom_vol) * 100
        
        # Verificar si la heterogeneidad cabe en el phantom
        fits = scenario['hetero_size'] <= scenario['phantom_size']
        
        print(f"\n{i}. ESCENARIO {scenario['name'].upper()}:")
        print(f"   üìè Phantom: {scenario['phantom_size']}√ó{scenario['phantom_size']}√ó{scenario['phantom_size']} cm")
        print(f"   üì¶ Heterogeneidad: {scenario['hetero_size']}√ó{scenario['hetero_size']}√ó{scenario['hetero_size']} cm")
        print(f"   üìä Proporci√≥n heterogeneidad: {hetero_percent:.1f}%")
        print(f"   üìù Descripci√≥n: {scenario['description']}")
        
        if not fits:
            print(f"   ‚ö†Ô∏è  PROBLEMA: Heterogeneidad no cabe en phantom")
        else:
            print(f"   ‚úÖ Geometr√≠a viable")
            
            # Calcular posici√≥n √≥ptima
            max_offset = (scenario['phantom_size'] - scenario['hetero_size']) / 2
            optimal_y = min(6.0, max_offset)  # Mantener cerca de la fuente
            
            print(f"   üìç Posici√≥n sugerida: (0, {optimal_y:.1f}, 0) cm")
            
            # Calcular impacto esperado en scoring mesh
            if hetero_percent > 30:
                print(f"   üéØ Impacto esperado: ALTO contraste en an√°lisis")
            elif hetero_percent > 20:
                print(f"   üéØ Impacto esperado: MODERADO contraste")
            else:
                print(f"   üéØ Impacto esperado: BAJO contraste")
    
    return scenarios

def analyze_dosimetric_implications():
    """Analizar implicaciones dosim√©tricas"""
    print("\n" + "="*70)
    print("‚ö° IMPLICACIONES DOSIM√âTRICAS DE LA OPTIMIZACI√ìN")
    print("="*70)
    
    print(f"\nüî¨ CONSIDERACIONES F√çSICAS:")
    print(f"   ‚Ä¢ Fuente Ir-192 en el origen (0,0,0)")
    print(f"   ‚Ä¢ Energ√≠a promedio ~380 keV")
    print(f"   ‚Ä¢ Rango efectivo en agua ~5-15 cm")
    print(f"   ‚Ä¢ Efectos de heterogeneidad m√°s pronunciados cerca de la fuente")
    
    print(f"\nüéØ VENTAJAS DE AUMENTAR LA HETEROGENEIDAD:")
    print(f"   ‚úÖ Mayor volumen de interacci√≥n con radiaci√≥n")
    print(f"   ‚úÖ Efectos de scattering y atenuaci√≥n m√°s evidentes")
    print(f"   ‚úÖ Mejor estad√≠stica en la regi√≥n de inter√©s")
    print(f"   ‚úÖ Contraste m√°s claro en mapas comparativos")
    
    print(f"\nüìè VENTAJAS DE REDUCIR EL PHANTOM:")
    print(f"   ‚úÖ Menor tiempo de simulaci√≥n")
    print(f"   ‚úÖ Mejor relaci√≥n se√±al/ruido")
    print(f"   ‚úÖ Scoring mesh m√°s eficiente")
    print(f"   ‚úÖ An√°lisis m√°s enfocado en la regi√≥n cr√≠tica")
    
    print(f"\n‚ö†Ô∏è  CONSIDERACIONES:")
    print(f"   ‚Ä¢ Mantener suficiente agua para simular backscatter")
    print(f"   ‚Ä¢ No reducir tanto que se pierdan efectos de borde")
    print(f"   ‚Ä¢ Considerar el rango de part√≠culas secundarias")

def create_geometry_comparison():
    """Crear visualizaci√≥n comparativa de geometr√≠as"""
    print(f"\nüé® Generando comparaci√≥n visual...")
    
    # Configuraci√≥n actual vs propuestas
    geometries = [
        {'name': 'ACTUAL', 'phantom': 30, 'hetero': 6, 'color': 'red'},
        {'name': 'CONSERVADOR', 'phantom': 20, 'hetero': 8, 'color': 'orange'},
        {'name': 'EQUILIBRADO', 'phantom': 16, 'hetero': 10, 'color': 'green'},
        {'name': 'AGRESIVO', 'phantom': 14, 'hetero': 12, 'color': 'blue'},
        {'name': 'MAX CONTRASTE', 'phantom': 12, 'hetero': 10, 'color': 'purple'}
    ]
    
    fig, axes = plt.subplots(1, len(geometries), figsize=(20, 4))
    fig.suptitle('COMPARACI√ìN DE GEOMETR√çAS PROPUESTAS', fontsize=16, fontweight='bold')
    
    for i, (ax, geom) in enumerate(zip(axes, geometries)):
        phantom_size = geom['phantom']
        hetero_size = geom['hetero']
        
        # Verificar si cabe
        fits = hetero_size <= phantom_size
        
        if fits:
            # Dibujar phantom (agua)
            phantom_rect = Rectangle((-phantom_size/2, -phantom_size/2), 
                                   phantom_size, phantom_size,
                                   facecolor='lightblue', edgecolor='blue', 
                                   linewidth=2, alpha=0.6, label='Agua')
            ax.add_patch(phantom_rect)
            
            # Dibujar heterogeneidad
            hetero_y = min(6.0, (phantom_size - hetero_size)/2)
            hetero_rect = Rectangle((-hetero_size/2, hetero_y - hetero_size/2),
                                  hetero_size, hetero_size,
                                  facecolor=geom['color'], edgecolor='darkred',
                                  linewidth=2, alpha=0.8, label='Heterogeneidad')
            ax.add_patch(hetero_rect)
            
            # Marcar fuente
            ax.plot(0, 0, 'r*', markersize=15, markeredgecolor='black')
            
            # Calcular porcentaje
            hetero_percent = (hetero_size**3 / phantom_size**3) * 100
            
            ax.set_xlim(-phantom_size/2 - 2, phantom_size/2 + 2)
            ax.set_ylim(-phantom_size/2 - 2, phantom_size/2 + 2)
            ax.set_aspect('equal')
            ax.grid(True, alpha=0.3)
            ax.set_title(f'{geom["name"]}\n{phantom_size}√ó{phantom_size} cm\n'
                        f'Hetero: {hetero_percent:.1f}%', 
                        fontweight='bold')
            ax.set_xlabel('X (cm)')
            if i == 0:
                ax.set_ylabel('Y (cm)')
        else:
            ax.text(0.5, 0.5, 'GEOMETR√çA\nINV√ÅLIDA', 
                   transform=ax.transAxes, ha='center', va='center',
                   fontsize=14, fontweight='bold', color='red')
            ax.set_title(f'{geom["name"]}\nINV√ÅLIDA', fontweight='bold', color='red')
    
    plt.tight_layout()
    
    # Guardar figura
    output_file = '../results/geometry_optimization_comparison.png'
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"‚úÖ Comparaci√≥n guardada: {output_file}")
    
    return fig

def generate_optimized_macros():
    """Generar macros optimizados para las mejores geometr√≠as"""
    print(f"\nüìù Generando macros optimizados...")
    
    # Configuraci√≥n equilibrada (recomendada)
    equilibrado_config = {
        'phantom_size': 16.0,
        'hetero_size': 10.0,
        'hetero_position': [0, 3, 0],  # M√°s cerca de la fuente
        'mesh_size': 9.0,  # Ligeramente mayor que heterogeneidad
        'mesh_bins': 90    # Mantener resoluci√≥n de 1 mm
    }
    
    print(f"\nüéØ CONFIGURACI√ìN RECOMENDADA (EQUILIBRADA):")
    print(f"   ‚Ä¢ Phantom: {equilibrado_config['phantom_size']}√ó{equilibrado_config['phantom_size']}√ó{equilibrado_config['phantom_size']} cm")
    print(f"   ‚Ä¢ Heterogeneidad: {equilibrado_config['hetero_size']}√ó{equilibrado_config['hetero_size']}√ó{equilibrado_config['hetero_size']} cm")
    print(f"   ‚Ä¢ Posici√≥n: {equilibrado_config['hetero_position']} cm")
    print(f"   ‚Ä¢ Scoring mesh: ¬±{equilibrado_config['mesh_size']} cm ({equilibrado_config['mesh_bins']}√ó{equilibrado_config['mesh_bins']} bins)")
    
    hetero_volume = equilibrado_config['hetero_size']**3
    phantom_volume = equilibrado_config['phantom_size']**3
    hetero_percent = (hetero_volume / phantom_volume) * 100
    
    print(f"   ‚Ä¢ Proporci√≥n heterogeneidad: {hetero_percent:.1f}% (vs {8.0:.1f}% actual)")
    print(f"   ‚Ä¢ Mejora en contraste: {hetero_percent/8.0:.1f}x")
    
    return equilibrado_config

def main():
    print("üîç AN√ÅLISIS DE PROPORCI√ìN PHANTOM/HETEROGENEIDAD")
    print("=" * 55)
    
    # Analizar geometr√≠a actual
    current_geom = analyze_current_geometry()
    
    # Proponer optimizaciones
    scenarios = propose_optimized_geometries()
    
    # Analizar implicaciones
    analyze_dosimetric_implications()
    
    # Crear visualizaci√≥n
    fig = create_geometry_comparison()
    
    # Generar configuraci√≥n recomendada
    recommended_config = generate_optimized_macros()
    
    print(f"\n‚ú® CONCLUSIONES Y RECOMENDACIONES ‚ú®")
    print(f"=" * 45)
    print(f"üéØ La configuraci√≥n EQUILIBRADA es la m√°s recomendada:")
    print(f"   ‚Üí Aumenta contraste {recommended_config['hetero_size']**3 / 6**3:.1f}x")
    print(f"   ‚Üí Reduce tiempo de simulaci√≥n ~3x")
    print(f"   ‚Üí Mantiene f√≠sica relevante")
    print(f"   ‚Üí Optimiza relaci√≥n se√±al/ruido")
    
    plt.show()

if __name__ == "__main__":
    main()
